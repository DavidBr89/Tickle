{"remainingRequest":"/home/djan/dev/TickleClient/node_modules/babel-loader/lib/index.js!/home/djan/dev/TickleClient/src/components/Generator/index.jsx","dependencies":[{"path":"/home/djan/dev/TickleClient/src/components/Generator/index.jsx","mtime":1515492553632},{"path":"/home/djan/dev/TickleClient/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/home/djan/dev/TickleClient/node_modules/babel-loader/lib/index.js","mtime":1492805601000}],"contextDependencies":[],"result":["import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp, _class2, _temp2;\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport styles from './index.scss';\n// import cardIconSrc from '../utils/map-layers/cardIcon.svg';\nimport { Card } from '../cards';\n\nimport graph from './cardDataTest.json';\nimport { forceSimulation } from 'd3-force';\n\nvar Generator = (_temp = _class = function (_Component) {\n  _inherits(Generator, _Component);\n\n  function Generator(props) {\n    _classCallCheck(this, Generator);\n\n    var _this = _possibleConstructorReturn(this, (Generator.__proto__ || _Object$getPrototypeOf(Generator)).call(this, props));\n\n    console.log('simulation links', graph);\n    var width = 2100;\n    var height = 800;\n\n    // Fix a sigle node\n    /* const fixedNode = graph.nodes[0];\n      fixedNode.fixed = true;\n      fixedNode.x = width/5;\n      fixedNode.y = height/3; */\n\n    var simulation = d3.forceSimulation().nodes(graph.nodes).force('link', d3.forceLink().links(graph.links).id(function (d) {\n      return d.ID;\n    }).distance(100)).force('charge', d3.forceManyBody())\n    // .force('link', d3.forceLink(graph.links))\n    // .force('X', d3.forceX().x(function(d) { return d.x }))\n    // .force('Y', d3.forceY().y(function(d) { return d.y }))\n    .force('collide', d3.forceCollide().radius(12)).force('center', d3.forceCenter(width / 4, height / 2))\n    // .on(\"tick\", ticked)\n    // .force('link')\n    // .links(graph.links)\n    .on('tick', function () {\n      var nodes = graph.nodes;\n      var links = graph.links;\n      _this.setState({ nodes: nodes, links: links });\n    }).stop();\n\n    // added\n\n    d3.range(0, 200).forEach(function () {\n      return simulation.tick();\n    });\n    var nodes = simulation.nodes();\n    var links = graph.links;\n    _this.state = { nodes: nodes, links: links, width: width, height: height, hovered: null };\n    return _this;\n  }\n\n  _createClass(Generator, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _state = this.state,\n          nodes = _state.nodes,\n          links = _state.links,\n          width = _state.width,\n          height = _state.height,\n          hovered = _state.hovered;\n\n      var color = d3.scaleOrdinal(d3.schemeCategory10);\n      return React.createElement(\n        'div',\n        { className: styles.simulatorDiv },\n        React.createElement('div', { style: { position: 'relative' } }),\n        React.createElement(Form, null),\n        React.createElement(\n          'div',\n          { style: { width: '400px', height: '600px' } },\n          hovered && React.createElement(Card, { title: 'Hassans card' })\n        ),\n        React.createElement(Graph, {\n          width: width,\n          height: height,\n          nodes: nodes,\n          links: links,\n          color: color,\n          hoverhandler: function hoverhandler(d) {\n            return _this2.setState({ hovered: d });\n          }\n        })\n      );\n    }\n  }]);\n\n  return Generator;\n}(Component), _class.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n}, _temp);\n\n// const Card = ({ hovered }) =>\n//   <div\n//     style={{\n//       position: 'absolute',\n//       // bottom: '240',\n//       width: '450px',\n//       border: '7px solid #73AD21',\n//       right: '0',\n//       // left: graph.x,\n//       // top: graph.y,\n//       background: 'green',\n//       paddingBottom: '10px',\n//       paddingLeft: '10px'\n//     }}\n//   >\n//     <div className={styles.cardTitle}>\n//       <h1>Tickle Card</h1>\n//     </div>\n//     <strong> EXP: </strong>\n//     <br />\n//     <strong> ID: </strong>\n//     {hovered.ID}\n//     <br />\n//     <strong> Title: </strong>\n//     {hovered.title}\n//     <br />\n//     <strong> Location: </strong>\n//     {JSON.stringify(hovered.location)}\n//     <br />\n//     <strong> Media: </strong>\n//     {JSON.stringify(hovered.media)}\n//     <br />\n//     <strong> Next Card: </strong>\n//     <br />\n//     <strong> Date: </strong>\n//     {hovered.date}\n//     <br />\n//     <strong> Tags: </strong>\n//     {JSON.stringify(hovered.tags)}\n//   </div>;\n\nvar Graph = function Graph(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      links = _ref.links,\n      nodes = _ref.nodes,\n      color = _ref.color,\n      hoverhandler = _ref.hoverhandler;\n  return React.createElement(\n    'svg',\n    { width: width, height: height },\n    React.createElement(\n      'g',\n      null,\n      React.createElement(\n        'marker',\n        {\n          id: 'arrowhead',\n          refX: '13',\n          refY: '6',\n          orient: 'auto',\n          markerWidth: '13',\n          markerHeight: '13'\n        },\n        React.createElement('path', { d: 'M2, 2 L2,11 L10,6 L2, 2' })\n      ),\n      links.map(function (d) {\n        return React.createElement('line', {\n          className: styles.link,\n          x1: d.source.x,\n          y1: d.source.y,\n          x2: d.target.x,\n          y2: d.target.y,\n          markerEnd: 'url(#arrowhead)'\n        });\n      })\n    ),\n    React.createElement(\n      'g',\n      null,\n      nodes.map(function (d) {\n        return React.createElement(\n          'g',\n          {\n            className: styles.node,\n            transform: 'translate(' + d.x + ', ' + d.y + ')',\n            onClick: function onClick() {\n              return hoverhandler(d);\n            }\n            // onMouseLeave={() => hoverhandler(null)}\n          },\n          React.createElement('circle', { r: 10, fill: color(d.group) })\n        );\n      })\n    )\n  );\n};\n\n/* to do:\ncreate 5 more cards --> OK\nthen create a graph of 10 nodes --> OK\nmap each card to a node --> OK\ndisplay onmouseover --> OK\nuse tooltips --> OK\n\nAfter that, create a non-functional\nUI for entering paramaters --> OK\n*/\n\nvar Form = (_temp2 = _class2 = function (_Component2) {\n  _inherits(Form, _Component2);\n\n  function Form(props) {\n    _classCallCheck(this, Form);\n\n    return _possibleConstructorReturn(this, (Form.__proto__ || _Object$getPrototypeOf(Form)).call(this, props));\n  }\n\n  _createClass(Form, [{\n    key: 'render',\n    value: function render() {\n      return React.createElement(\n        'div',\n        { className: styles.base },\n        React.createElement(\n          'form',\n          null,\n          React.createElement(\n            'label',\n            null,\n            React.createElement(\n              'strong',\n              null,\n              'Number of cards:'\n            )\n          ),\n          React.createElement('input', {\n            className: styles.simulatorInput,\n            type: 'text',\n            name: 'nodes',\n            title: 'nodes'\n          }),\n          React.createElement('br', null),\n          React.createElement(\n            'label',\n            null,\n            React.createElement(\n              'strong',\n              null,\n              'Number of cardsets:'\n            )\n          ),\n          React.createElement('input', {\n            className: styles.simulatorInput,\n            type: 'text',\n            name: 'links',\n            title: 'links'\n          }),\n          React.createElement('br', null),\n          React.createElement(\n            'label',\n            null,\n            React.createElement(\n              'strong',\n              null,\n              'Select from cardsets:'\n            )\n          ),\n          React.createElement('br', null),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'university', value: '' }),\n            ' Culture'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'culture', value: '' }),\n            ' Entertainment'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'university', value: '' }),\n            ' Course'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'culture', value: '' }),\n            ' Exams'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.sim0ulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'university', value: '' }),\n            ' Sports'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'culture', value: '' }),\n            ' Explore'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'culture', value: '' }),\n            ' Reading'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'culture', value: '' }),\n            ' Study Material'\n          ),\n          React.createElement('br', null),\n          React.createElement('br', null),\n          React.createElement(\n            'label',\n            null,\n            React.createElement(\n              'strong',\n              null,\n              'Select from tags:'\n            )\n          ),\n          React.createElement('br', null),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'university', value: '' }),\n            ' University'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'culture', value: '' }),\n            ' Sports'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'university', value: '' }),\n            ' Culture'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'culture', value: '' }),\n            ' Library'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'university', value: '' }),\n            ' History'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'culture', value: '' }),\n            ' Recreation'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'university', value: '' }),\n            ' Nature'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'culture', value: '' }),\n            ' Art'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'university', value: '' }),\n            ' Architecture'\n          ),\n          React.createElement(\n            'label',\n            { className: styles.simulatorRightSpace },\n            React.createElement('input', { type: 'checkbox', name: 'culture', value: '' }),\n            ' Tourism'\n          ),\n          React.createElement('br', null),\n          React.createElement('br', null),\n          React.createElement(\n            'label',\n            null,\n            React.createElement(\n              'strong',\n              null,\n              'New tag(s). Seperate multiple tags with \";\":'\n            )\n          ),\n          React.createElement('input', {\n            className: styles.simulatorInput,\n            type: 'text',\n            name: 'tags',\n            title: 'tags'\n          }),\n          React.createElement('br', null),\n          React.createElement(\n            'label',\n            null,\n            React.createElement(\n              'strong',\n              null,\n              'Select location'\n            )\n          ),\n          React.createElement(\n            'select',\n            null,\n            React.createElement(\n              'option',\n              { value: 'Evere' },\n              'Evere'\n            ),\n            React.createElement(\n              'option',\n              { value: 'Elsene' },\n              'Elsene'\n            ),\n            React.createElement(\n              'option',\n              { value: 'Brussel-Centrum' },\n              'Brussel-Centrum'\n            ),\n            React.createElement(\n              'option',\n              { value: 'Etterbeek' },\n              'Etterbeek'\n            )\n          ),\n          React.createElement(\n            'label',\n            null,\n            React.createElement(\n              'strong',\n              null,\n              'Distribution of the links:'\n            )\n          ),\n          React.createElement('br', null),\n          React.createElement(\n            'form',\n            { action: '' },\n            React.createElement('input', { type: 'radio', name: 'linkDistribution', value: 'Rabdom' }),\n            ' Random',\n            React.createElement('br', null),\n            React.createElement('input', { type: 'radio', name: 'linkDistribution', value: 'Manual' }),\n            ' Manual'\n          ),\n          React.createElement('br', null),\n          React.createElement('input', {\n            className: styles.simulatorSubmit,\n            type: 'submit',\n            value: 'Enter'\n          })\n        )\n      );\n    }\n  }]);\n\n  return Form;\n}(Component), _class2.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n}, _temp2);\nvar _default = Generator;\n\n\nexport default _default;\n;\n\nvar _temp3 = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(Generator, 'Generator', '/home/djan/dev/TickleClient/src/components/Generator/index.jsx');\n\n  __REACT_HOT_LOADER__.register(Graph, 'Graph', '/home/djan/dev/TickleClient/src/components/Generator/index.jsx');\n\n  __REACT_HOT_LOADER__.register(Form, 'Form', '/home/djan/dev/TickleClient/src/components/Generator/index.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/djan/dev/TickleClient/src/components/Generator/index.jsx');\n}();\n\n;",{"version":3,"sources":["src/components/Generator/index.jsx"],"names":["React","Component","PropTypes","d3","styles","Card","graph","forceSimulation","Generator","props","console","log","width","height","simulation","nodes","force","forceLink","links","id","d","ID","distance","forceManyBody","forceCollide","radius","forceCenter","on","setState","stop","range","forEach","tick","state","hovered","color","scaleOrdinal","schemeCategory10","simulatorDiv","position","propTypes","children","node","className","string","Graph","hoverhandler","map","link","source","x","y","target","group","Form","base","simulatorInput","simulatorRightSpace","sim0ulatorRightSpace","simulatorSubmit"],"mappings":"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","file":"index.jsx","sourceRoot":"/home/djan/dev/TickleClient","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3 from 'd3';\nimport styles from './index.scss';\n// import cardIconSrc from '../utils/map-layers/cardIcon.svg';\nimport { Card } from '../cards';\n\nimport graph from './cardDataTest.json';\nimport { forceSimulation } from 'd3-force';\n\nclass Generator extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n    console.log('simulation links', graph);\n    const width = 2100;\n    const height = 800;\n\n    // Fix a sigle node\n    /* const fixedNode = graph.nodes[0];\n      fixedNode.fixed = true;\n      fixedNode.x = width/5;\n      fixedNode.y = height/3; */\n\n    const simulation = d3\n      .forceSimulation()\n      .nodes(graph.nodes)\n      .force(\n        'link',\n        d3.forceLink().links(graph.links).id(d => d.ID).distance(100)\n      )\n      .force('charge', d3.forceManyBody())\n      // .force('link', d3.forceLink(graph.links))\n      // .force('X', d3.forceX().x(function(d) { return d.x }))\n      // .force('Y', d3.forceY().y(function(d) { return d.y }))\n      .force('collide', d3.forceCollide().radius(12))\n      .force('center', d3.forceCenter(width / 4, height / 2))\n      // .on(\"tick\", ticked)\n      // .force('link')\n      // .links(graph.links)\n      .on('tick', () => {\n        const nodes = graph.nodes;\n        const links = graph.links;\n        this.setState({ nodes, links });\n      })\n      .stop();\n\n    // added\n\n    d3.range(0, 200).forEach(() => simulation.tick());\n    const nodes = simulation.nodes();\n    const links = graph.links;\n    this.state = { nodes, links, width, height, hovered: null };\n  }\n\n  render() {\n    const { nodes, links, width, height, hovered } = this.state;\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\n    return (\n      <div className={styles.simulatorDiv}>\n        <div style={{ position: 'relative' }} />\n        <Form />\n        <div style={{ width: '400px', height: '600px' }}>\n          {hovered && <Card title={'Hassans card'} />}\n        </div>\n\n        <Graph\n          width={width}\n          height={height}\n          nodes={nodes}\n          links={links}\n          color={color}\n          hoverhandler={d => this.setState({ hovered: d })}\n        />\n      </div>\n    );\n  }\n}\n\n// const Card = ({ hovered }) =>\n//   <div\n//     style={{\n//       position: 'absolute',\n//       // bottom: '240',\n//       width: '450px',\n//       border: '7px solid #73AD21',\n//       right: '0',\n//       // left: graph.x,\n//       // top: graph.y,\n//       background: 'green',\n//       paddingBottom: '10px',\n//       paddingLeft: '10px'\n//     }}\n//   >\n//     <div className={styles.cardTitle}>\n//       <h1>Tickle Card</h1>\n//     </div>\n//     <strong> EXP: </strong>\n//     <br />\n//     <strong> ID: </strong>\n//     {hovered.ID}\n//     <br />\n//     <strong> Title: </strong>\n//     {hovered.title}\n//     <br />\n//     <strong> Location: </strong>\n//     {JSON.stringify(hovered.location)}\n//     <br />\n//     <strong> Media: </strong>\n//     {JSON.stringify(hovered.media)}\n//     <br />\n//     <strong> Next Card: </strong>\n//     <br />\n//     <strong> Date: </strong>\n//     {hovered.date}\n//     <br />\n//     <strong> Tags: </strong>\n//     {JSON.stringify(hovered.tags)}\n//   </div>;\n\nconst Graph = ({ width, height, links, nodes, color, hoverhandler }) =>\n  <svg width={width} height={height}>\n    <g>\n      <marker\n        id=\"arrowhead\"\n        refX=\"13\"\n        refY=\"6\"\n        orient=\"auto\"\n        markerWidth=\"13\"\n        markerHeight=\"13\"\n      >\n        <path d=\"M2, 2 L2,11 L10,6 L2, 2\" />\n      </marker>\n      {links.map(d =>\n        <line\n          className={styles.link}\n          x1={d.source.x}\n          y1={d.source.y}\n          x2={d.target.x}\n          y2={d.target.y}\n          markerEnd=\"url(#arrowhead)\"\n        />\n      )}\n    </g>\n    <g>\n      {nodes.map(d =>\n        <g\n          className={styles.node}\n          transform={`translate(${d.x}, ${d.y})`}\n          onClick={() => hoverhandler(d)}\n          // onMouseLeave={() => hoverhandler(null)}\n        >\n          <circle r={10} fill={color(d.group)} />\n        </g>\n      )}\n    </g>\n  </svg>;\n\n/* to do:\ncreate 5 more cards --> OK\nthen create a graph of 10 nodes --> OK\nmap each card to a node --> OK\ndisplay onmouseover --> OK\nuse tooltips --> OK\n\nAfter that, create a non-functional\nUI for entering paramaters --> OK\n*/\n\nclass Form extends Component {\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className={styles.base}>\n        <form>\n          <label>\n            <strong>Number of cards:</strong>\n          </label>\n          <input\n            className={styles.simulatorInput}\n            type=\"text\"\n            name=\"nodes\"\n            title=\"nodes\"\n          />\n          <br />\n          <label>\n            <strong>Number of cardsets:</strong>\n          </label>\n          <input\n            className={styles.simulatorInput}\n            type=\"text\"\n            name=\"links\"\n            title=\"links\"\n          />\n          <br />\n          <label>\n            <strong>Select from cardsets:</strong>\n          </label>\n          <br />\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"university\" value=\"\" /> Culture\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"culture\" value=\"\" /> Entertainment\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"university\" value=\"\" /> Course\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"culture\" value=\"\" /> Exams\n          </label>\n          <label className={styles.sim0ulatorRightSpace}>\n            <input type=\"checkbox\" name=\"university\" value=\"\" /> Sports\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"culture\" value=\"\" /> Explore\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"culture\" value=\"\" /> Reading\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"culture\" value=\"\" /> Study Material\n          </label>\n          <br />\n          <br />\n          <label>\n            <strong>Select from tags:</strong>\n          </label>\n          <br />\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"university\" value=\"\" /> University\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"culture\" value=\"\" /> Sports\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"university\" value=\"\" /> Culture\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"culture\" value=\"\" /> Library\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"university\" value=\"\" /> History\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"culture\" value=\"\" /> Recreation\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"university\" value=\"\" /> Nature\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"culture\" value=\"\" /> Art\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"university\" value=\"\" /> Architecture\n          </label>\n          <label className={styles.simulatorRightSpace}>\n            <input type=\"checkbox\" name=\"culture\" value=\"\" /> Tourism\n          </label>\n          <br />\n          <br />\n          <label>\n            <strong>New tag(s). Seperate multiple tags with \";\":</strong>\n          </label>\n          <input\n            className={styles.simulatorInput}\n            type=\"text\"\n            name=\"tags\"\n            title=\"tags\"\n          />\n          <br />\n          <label>\n            <strong>Select location</strong>\n          </label>\n          <select>\n            <option value=\"Evere\">Evere</option>\n            <option value=\"Elsene\">Elsene</option>\n            <option value=\"Brussel-Centrum\">Brussel-Centrum</option>\n            <option value=\"Etterbeek\">Etterbeek</option>\n          </select>\n          <label>\n            <strong>Distribution of the links:</strong>\n          </label>\n          <br />\n          <form action=\"\">\n            <input type=\"radio\" name=\"linkDistribution\" value=\"Rabdom\" /> Random<br />\n            <input type=\"radio\" name=\"linkDistribution\" value=\"Manual\" /> Manual\n          </form>\n\n          <br />\n          <input\n            className={styles.simulatorSubmit}\n            type=\"submit\"\n            value=\"Enter\"\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Generator;\n"]}]}