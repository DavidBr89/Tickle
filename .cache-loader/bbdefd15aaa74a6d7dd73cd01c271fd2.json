{"remainingRequest":"/home/djan/dev/TickleClient/node_modules/babel-loader/lib/index.js!/home/djan/dev/TickleClient/src/components/MapView/MapView.jsx","dependencies":[{"path":"/home/djan/dev/TickleClient/src/components/MapView/MapView.jsx","mtime":1517434545629},{"path":"/home/djan/dev/TickleClient/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/home/djan/dev/TickleClient/node_modules/babel-loader/lib/index.js","mtime":1492805601000}],"contextDependencies":[],"result":["import _slicedToArray from 'babel-runtime/helpers/slicedToArray';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _class2, _temp, _class3, _temp2;\n\nimport React, { Component, PureComponent } from 'react';\nimport * as d3 from 'd3';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport WebMercatorViewport from 'viewport-mercator-project';\nimport Grid from 'mygrid/dist';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n// import { Motion, spring } from 'react-motion';\nimport PropTypes from 'prop-types';\n// import Immutable from 'immutable';\n// import _ from 'lodash';\n// import request from 'superagent';\n// import jsonp from 'superagent-jsonp';\n\nimport MapGL, { LinearInterpolator, FlyToInterpolator } from 'react-map-gl';\n\nimport ReactTimeout from 'react-timeout';\n// import rasterTileStyle from 'raster-tile-style';\n// import ngeohash from 'ngeohash';,\nimport cx from './MapView.scss';\nimport { Card, PreviewCard } from '../cards';\n\n// console.log('grid', Grid);\n// import { Grid } from '../utils';\n// import { ScrollElement, ScrollView } from '../utils/ScrollView';\n\n// import Modal from './components/utils/Modal';\n\n// import CardOverlay from '../utils/map-layers/CardOverlay';\nimport { DivOverlay, SlowDivOverlay, UserOverlay, SvgOverlay, UserMarker, AnimMarker } from '../utils/map-layers/DivOverlay';\n// import cardIconSrc from '../utils/map-layers/cardIcon.svg';\nimport { Modal } from '../utils';\n\nvar metersPerPixel = function metersPerPixel(latitude, zoomLevel) {\n  var earthCircumference = 40075017;\n  var latitudeRadians = latitude * (Math.PI / 180);\n  return earthCircumference * Math.cos(latitudeRadians) / Math.pow(2, zoomLevel + 8);\n};\n\nvar geometricRadius = function geometricRadius(latitude, meters, zoomLevel) {\n  return meters / metersPerPixel(latitude, zoomLevel);\n};\n\nfunction overlap(e, o) {\n  // dx and dy are the vertical and horizontal distances\n  var dx = o.x - e.x;\n  var dy = o.y - e.y;\n\n  // Determine the straight-line distance between centers.\n  var d = Math.sqrt(dy * dy + dx * dx);\n\n  // Check Intersections\n  if (d > e.r + o.r) {\n    // No Solution. Circles do not intersect\n    return false;\n  } else if (d < Math.abs(e.r - o.r)) {\n    // No Solution. one circle is contained in the other\n    return true;\n  }\n  return true;\n}\n\nvar CardGrid = ReactTimeout(_class = (_temp = _class2 = function (_Component) {\n  _inherits(CardGrid, _Component);\n\n  function CardGrid(props) {\n    _classCallCheck(this, CardGrid);\n\n    var _this = _possibleConstructorReturn(this, (CardGrid.__proto__ || _Object$getPrototypeOf(CardGrid)).call(this, props));\n\n    _this.id = null;\n    return _this;\n  }\n\n  _createClass(CardGrid, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n\n    // componentDidUpdate(prevProps, prevState) {\n    //   console.log('upd');\n    // }\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          cards = _props.cards,\n          onSelect = _props.onSelect,\n          onExtend = _props.onExtend,\n          offset = _props.offset;\n\n\n      var onChange = function onChange(d) {\n        return function (visible) {\n          // console.log('id', this.id);\n          var _props2 = _this2.props,\n              setTimeout = _props2.setTimeout,\n              clearTimeout = _props2.clearTimeout;\n\n          if (visible) {\n            clearTimeout(_this2.id);\n            _this2.id = setTimeout(function () {\n              return onSelect(d.id);\n            }, 1000);\n            // onSelect(d.id);\n          }\n        };\n      };\n\n      // TODO: isVisible\n      return React.createElement(\n        Grid,\n        {\n          rows: 1,\n          cols: Math.floor(cards.length) * 2,\n          colSpan: 2,\n          rowSpan: 1,\n          gap: 2,\n          style: { width: cards.length * 40 + '%', overflow: 'visible' }\n        },\n        cards.map(function (d) {\n          return React.createElement(\n            'div',\n            null,\n            React.createElement(\n              VisibilitySensor,\n              {\n                offset: { left: offset, right: offset },\n                onChange: onChange(d)\n              },\n              function (_ref) {\n                var isVisible = _ref.isVisible;\n                return React.createElement(PreviewCard, _extends({}, d, {\n                  onClick: function onClick() {\n                    return isVisible && onExtend(d.id);\n                  },\n                  selected: isVisible,\n                  style: {\n                    opacity: !isVisible ? 0.56 : null,\n                    transform: isVisible ? 'scale(1.2)' : null,\n                    transition: 'transform 1s',\n                    height: '100%'\n                  }\n                }));\n              }\n            )\n          );\n        })\n      );\n    }\n  }]);\n\n  return CardGrid;\n}(Component), _class2.propTypes = {\n  cards: PropTypes.array.isRequired,\n  onSelect: PropTypes.func.isRequired,\n  onExtend: PropTypes.func.isRequired,\n  setTimeout: PropTypes.func.isRequired,\n  clearTimeout: PropTypes.func.isRequired,\n  offset: PropTypes.number.isRequired\n}, _temp)) || _class;\n\n// const TimoutGrid = ReactTimeout(CardGrid);\n\n// import { dummyCards } from '../../dummyData';\n//\n// // TODO:  change\n// dummyCards.forEach((d, i) => {\n//   d.id = i;\n// });\n\nvar CircleOverlay = function CircleOverlay(_ref2) {\n  var mapViewport = _ref2.mapViewport,\n      userLocation = _ref2.userLocation,\n      selectedCard = _ref2.selectedCard;\n  var zoom = mapViewport.zoom;\n  var latitude = userLocation.latitude,\n      longitude = userLocation.longitude;\n\n  var r = geometricRadius(latitude, 500, zoom);\n\n  var mercator = new WebMercatorViewport(mapViewport);\n\n  var _mercator$project = mercator.project([longitude, latitude]),\n      _mercator$project2 = _slicedToArray(_mercator$project, 2),\n      x = _mercator$project2[0],\n      y = _mercator$project2[1];\n\n  var _mercator$project3 = mercator.project([selectedCard.loc.longitude, selectedCard.loc.latitude]),\n      _mercator$project4 = _slicedToArray(_mercator$project3, 2),\n      x1 = _mercator$project4[0],\n      y1 = _mercator$project4[1];\n  // console.log('CircleOverlay', [x1, y1]);\n\n  var accessible = overlap({ x: x, y: y, r: 40 }, { x: x1, y: y1, r: r });\n  // TODO: change SvgOverlay\n  return React.createElement(\n    SvgOverlay,\n    _extends({}, mapViewport, { data: [selectedCard] }),\n    function () {\n      return React.createElement('circle', {\n        r: r,\n        cx: x1,\n        cy: y1,\n        stroke: 'black',\n        fill: accessible && zoom > 11 ? 'green' : 'red',\n        opacity: 0.3\n      });\n    }\n  );\n};\n\nCircleOverlay.propTypes = {\n  mapViewport: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number,\n    latitude: PropTypes.number,\n    longitude: PropTypes.number\n  })\n};\n\nCircleOverlay.defaultProps = {\n  mapViewport: { width: 200, height: 200, latitude: 0, longitude: 0 }\n};\n\nvar MapView = (_temp2 = _class3 = function (_PureComponent) {\n  _inherits(MapView, _PureComponent);\n\n  function MapView(props) {\n    _classCallCheck(this, MapView);\n\n    // TODO put into container element\n    var _this3 = _possibleConstructorReturn(this, (MapView.__proto__ || _Object$getPrototypeOf(MapView)).call(this, props));\n\n    var screenResizeAction = props.screenResizeAction;\n\n    // this._onChangeViewport = this._onChangeViewport.bind(this);\n    // this._userMove = this._userMove.bind(this);\n    // this.gridSpan = this.gridSpan.bind(this);\n\n    window.addEventListener('resize', function () {\n      screenResizeAction({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    });\n\n    // TODO: respect margins\n    screenResizeAction({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n    _this3.scrollTo = scrollTo.bind(_this3);\n    _this3.node = null;\n    return _this3;\n  }\n\n  _createClass(MapView, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // const { screenResize } = this.props;\n      // window.addEventListener('resize', () => {\n      //   this.setState({\n      //     mapHeight: {\n      //       width: window.innerWidth,\n      //       height: window.innerHeight\n      //     }\n      //   });\n      // });\n\n      navigator.geolocation.watchPosition(function (pos) {\n        var userLocation = {\n          latitude: pos.coords.latitude,\n          longitude: pos.coords.longitude\n        };\n\n        // TODO:\n        var centerLocation = _extends({}, userLocation);\n      },\n      // 50.846749, 4.352349\n      function (d) {\n        return console.log('error watch pos', d);\n      }, { timeout: 1000000 });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.addEventListener('resize', function () {});\n      navigator.geolocation.watchPosition(function () {}, function () {}, { timeout: 1 });\n      navigator.geolocation.getCurrentPosition(function () {}, function () {}, {\n        timeout: 1\n      });\n\n      // navigator.geolocation.clearWatch(this.state.watchPosId);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      var _props3 = this.props,\n          cards = _props3.cards,\n          mapZoom = _props3.mapZoom,\n          userLocation = _props3.userLocation,\n          selectedCardId = _props3.selectedCardId,\n          centerLocation = _props3.centerLocation,\n          width = _props3.width,\n          height = _props3.height,\n          extCardId = _props3.extCardId,\n          headerPad = _props3.headerPad,\n          userMoveAction = _props3.userMoveAction,\n          changeMapViewportAction = _props3.changeMapViewportAction,\n          selectCardAction = _props3.selectCardAction,\n          extCardAction = _props3.extCardAction,\n          cardChallengeOpen = _props3.cardChallengeOpen,\n          toggleCardChallengeAction = _props3.toggleCardChallengeAction;\n\n      // console.log('width', mapDim);\n\n      var mapDim = { width: width, height: height };\n      // console.log('userLocation', userLocation, 'centerLocation', centerLocation);\n      var mapViewport = _extends({}, mapDim, centerLocation, { zoom: mapZoom });\n      // const gridConfig = this.gridSpan();\n      var selectedCard = selectedCardId !== null ? cards.find(function (d) {\n        return d.id === selectedCardId;\n      }) : null;\n\n      return React.createElement(\n        'div',\n        null,\n        React.createElement(\n          Modal,\n          {\n            id: 'modal',\n            content: selectedCard,\n            visible: cardChallengeOpen,\n            closeHandler: function closeHandler() {\n              return toggleCardChallengeAction({ cardChallengeOpen: false });\n            }\n          },\n          React.createElement('iframe', {\n            title: 'emperors',\n            src: 'http://thescalli.com/emperors/',\n            style: { border: 'none', width: '100%', height: height + 20 }\n          })\n        ),\n        React.createElement(\n          'div',\n          { ref: function ref(node) {\n              return _this4.node = node;\n            }, style: { position: 'relative' } },\n          React.createElement(\n            'div',\n            {\n              style: {\n                position: 'absolute',\n                left: 0,\n                right: 0\n                // pointerEvents: extCardId !== null ? 'none' : null\n              }\n            },\n            React.createElement(\n              MapGL,\n              _extends({}, mapViewport, {\n                onViewportChange: changeMapViewportAction,\n                isdragging: false,\n                startdraglnglat: null,\n                onClick: userMoveAction\n              }),\n              selectedCard && React.createElement(CircleOverlay, {\n                userLocation: userLocation,\n                mapViewport: mapViewport,\n                selectedCard: selectedCard\n              }),\n              React.createElement(\n                SlowDivOverlay,\n                _extends({}, mapViewport, { data: cards }),\n                function (c, _ref3) {\n                  var _ref4 = _slicedToArray(_ref3, 2),\n                      x = _ref4[0],\n                      y = _ref4[1];\n\n                  return React.createElement(\n                    AnimMarker,\n                    {\n                      key: c.id,\n                      selected: extCardId === c.id,\n                      width: extCardId === c.id ? width - 10 : 40,\n                      height: extCardId === c.id ? height - 5 : 50,\n                      x: x + 5,\n                      y: y + 3\n                    },\n                    React.createElement(Card, _extends({}, c, {\n                      onClose: function onClose() {\n                        return extCardAction(null);\n                      },\n                      onCollect: function onCollect() {\n                        return toggleCardChallengeAction({ cardChallengeOpen: true });\n                      }\n                    }))\n                  );\n                }\n              ),\n              React.createElement(\n                DivOverlay,\n                _extends({}, mapViewport, { data: [{ loc: userLocation }] }),\n                function (c, _ref5) {\n                  var _ref6 = _slicedToArray(_ref5, 2),\n                      x = _ref6[0],\n                      y = _ref6[1];\n\n                  return React.createElement(UserMarker, { x: x, y: y });\n                }\n              ),\n              React.createElement(UserOverlay, _extends({}, mapViewport, { location: userLocation }))\n            )\n          ),\n          React.createElement(\n            'div',\n            {\n              className: '' + cx.cardGridCont,\n              style: {\n                position: 'absolute',\n                left: 0,\n                right: 0,\n                paddingTop: '20px'\n              }\n            },\n            React.createElement(CardGrid, {\n              cards: cards,\n              onSelect: selectCardAction,\n              onExtend: extCardAction,\n              offset: width / 4\n            })\n          )\n        )\n      );\n    }\n  }]);\n\n  return MapView;\n}(PureComponent), _class3.propTypes = {\n  cards: PropTypes.array.isRequired,\n  mapZoom: PropTypes.number.isRequired,\n  userLocation: PropTypes.array.isRequired,\n  selectedCardId: PropTypes.string.isRequired,\n  extCardId: PropTypes.string.isRequired,\n  centerLocation: PropTypes.object.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  cardChallengeOpen: PropTypes.bool.isRequired,\n\n  userMoveAction: PropTypes.func.isRequired,\n  changeMapViewportAction: PropTypes.func.isRequired,\n  selectCardAction: PropTypes.func.isRequired,\n  extCardAction: PropTypes.func.isRequired,\n  toggleCardChallengeAction: PropTypes.func.isRequired,\n  screenResizeAction: PropTypes.func.isRequired\n}, _temp2);\nvar _default = MapView;\n\nexport default _default;\n;\n\nvar _temp3 = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(metersPerPixel, 'metersPerPixel', '/home/djan/dev/TickleClient/src/components/MapView/MapView.jsx');\n\n  __REACT_HOT_LOADER__.register(geometricRadius, 'geometricRadius', '/home/djan/dev/TickleClient/src/components/MapView/MapView.jsx');\n\n  __REACT_HOT_LOADER__.register(overlap, 'overlap', '/home/djan/dev/TickleClient/src/components/MapView/MapView.jsx');\n\n  __REACT_HOT_LOADER__.register(CardGrid, 'CardGrid', '/home/djan/dev/TickleClient/src/components/MapView/MapView.jsx');\n\n  __REACT_HOT_LOADER__.register(CircleOverlay, 'CircleOverlay', '/home/djan/dev/TickleClient/src/components/MapView/MapView.jsx');\n\n  __REACT_HOT_LOADER__.register(MapView, 'MapView', '/home/djan/dev/TickleClient/src/components/MapView/MapView.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/djan/dev/TickleClient/src/components/MapView/MapView.jsx');\n}();\n\n;",{"version":3,"sources":["src/components/MapView/MapView.jsx"],"names":["React","Component","PureComponent","d3","VisibilitySensor","WebMercatorViewport","Grid","PropTypes","MapGL","LinearInterpolator","FlyToInterpolator","ReactTimeout","cx","Card","PreviewCard","DivOverlay","SlowDivOverlay","UserOverlay","SvgOverlay","UserMarker","AnimMarker","Modal","metersPerPixel","latitude","zoomLevel","earthCircumference","latitudeRadians","Math","PI","cos","pow","geometricRadius","meters","overlap","e","o","dx","x","dy","y","d","sqrt","r","abs","CardGrid","props","id","cards","onSelect","onExtend","offset","onChange","setTimeout","clearTimeout","visible","floor","length","width","overflow","map","left","right","isVisible","opacity","transform","transition","height","propTypes","array","isRequired","func","number","CircleOverlay","mapViewport","userLocation","selectedCard","zoom","longitude","mercator","project","loc","x1","y1","accessible","shape","defaultProps","MapView","screenResizeAction","window","addEventListener","innerWidth","innerHeight","scrollTo","bind","node","navigator","geolocation","watchPosition","pos","coords","centerLocation","console","log","timeout","getCurrentPosition","mapZoom","selectedCardId","extCardId","headerPad","userMoveAction","changeMapViewportAction","selectCardAction","extCardAction","cardChallengeOpen","toggleCardChallengeAction","mapDim","find","border","position","c","cardGridCont","paddingTop","string","object","bool"],"mappings":"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","file":"MapView.jsx","sourceRoot":"/home/djan/dev/TickleClient","sourcesContent":["import React, { Component, PureComponent } from 'react';\nimport * as d3 from 'd3';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport WebMercatorViewport from 'viewport-mercator-project';\nimport Grid from 'mygrid/dist';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n// import { Motion, spring } from 'react-motion';\nimport PropTypes from 'prop-types';\n// import Immutable from 'immutable';\n// import _ from 'lodash';\n// import request from 'superagent';\n// import jsonp from 'superagent-jsonp';\n\nimport MapGL, { LinearInterpolator, FlyToInterpolator } from 'react-map-gl';\n\nimport ReactTimeout from 'react-timeout';\n// import rasterTileStyle from 'raster-tile-style';\n// import ngeohash from 'ngeohash';,\nimport cx from './MapView.scss';\nimport { Card, PreviewCard } from '../cards';\n\n// console.log('grid', Grid);\n// import { Grid } from '../utils';\n// import { ScrollElement, ScrollView } from '../utils/ScrollView';\n\n// import Modal from './components/utils/Modal';\n\n// import CardOverlay from '../utils/map-layers/CardOverlay';\nimport {\n  DivOverlay,\n  SlowDivOverlay,\n  UserOverlay,\n  SvgOverlay,\n  UserMarker,\n  AnimMarker\n} from '../utils/map-layers/DivOverlay';\n// import cardIconSrc from '../utils/map-layers/cardIcon.svg';\nimport { Modal } from '../utils';\n\nconst metersPerPixel = function(latitude, zoomLevel) {\n  const earthCircumference = 40075017;\n  const latitudeRadians = latitude * (Math.PI / 180);\n  return (\n    earthCircumference * Math.cos(latitudeRadians) / Math.pow(2, zoomLevel + 8)\n  );\n};\n\nconst geometricRadius = function(latitude, meters, zoomLevel) {\n  return meters / metersPerPixel(latitude, zoomLevel);\n};\n\nfunction overlap(e, o) {\n  // dx and dy are the vertical and horizontal distances\n  const dx = o.x - e.x;\n  const dy = o.y - e.y;\n\n  // Determine the straight-line distance between centers.\n  const d = Math.sqrt(dy * dy + dx * dx);\n\n  // Check Intersections\n  if (d > e.r + o.r) {\n    // No Solution. Circles do not intersect\n    return false;\n  } else if (d < Math.abs(e.r - o.r)) {\n    // No Solution. one circle is contained in the other\n    return true;\n  }\n  return true;\n}\n\n@ReactTimeout\nclass CardGrid extends Component {\n  static propTypes = {\n    cards: PropTypes.array.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onExtend: PropTypes.func.isRequired,\n    setTimeout: PropTypes.func.isRequired,\n    clearTimeout: PropTypes.func.isRequired,\n    offset: PropTypes.number.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n    this.id = null;\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   console.log('upd');\n  // }\n\n  render() {\n    const {\n      cards,\n      onSelect,\n      onExtend,\n      offset\n      // setTimeout,\n      // clearTimeout\n    } = this.props;\n\n    const onChange = d => visible => {\n      // console.log('id', this.id);\n      const { setTimeout, clearTimeout } = this.props;\n      if (visible) {\n        clearTimeout(this.id);\n        this.id = setTimeout(() => onSelect(d.id), 1000);\n        // onSelect(d.id);\n      }\n    };\n\n    // TODO: isVisible\n    return (\n      <Grid\n        rows={1}\n        cols={Math.floor(cards.length) * 2}\n        colSpan={2}\n        rowSpan={1}\n        gap={2}\n        style={{ width: `${cards.length * 40}%`, overflow: 'visible' }}\n      >\n        {cards.map(d => (\n          <div>\n            <VisibilitySensor\n              offset={{ left: offset, right: offset }}\n              onChange={onChange(d)}\n            >\n              {({ isVisible }) => (\n                <PreviewCard\n                  {...d}\n                  onClick={() => isVisible && onExtend(d.id)}\n                  selected={isVisible}\n                  style={{\n                    opacity: !isVisible ? 0.56 : null,\n                    transform: isVisible ? 'scale(1.2)' : null,\n                    transition: 'transform 1s',\n                    height: '100%'\n                  }}\n                />\n              )}\n            </VisibilitySensor>\n          </div>\n        ))}\n      </Grid>\n    );\n  }\n}\n\n// const TimoutGrid = ReactTimeout(CardGrid);\n\n// import { dummyCards } from '../../dummyData';\n//\n// // TODO:  change\n// dummyCards.forEach((d, i) => {\n//   d.id = i;\n// });\n\nconst CircleOverlay = ({ mapViewport, userLocation, selectedCard }) => {\n  const { zoom } = mapViewport;\n  const { latitude, longitude } = userLocation;\n  const r = geometricRadius(latitude, 500, zoom);\n\n  const mercator = new WebMercatorViewport(mapViewport);\n  const [x, y] = mercator.project([longitude, latitude]);\n  const [x1, y1] = mercator.project([\n    selectedCard.loc.longitude,\n    selectedCard.loc.latitude\n  ]);\n  // console.log('CircleOverlay', [x1, y1]);\n\n  const accessible = overlap({ x, y, r: 40 }, { x: x1, y: y1, r });\n  // TODO: change SvgOverlay\n  return (\n    <SvgOverlay {...mapViewport} data={[selectedCard]}>\n      {() => (\n        <circle\n          r={r}\n          cx={x1}\n          cy={y1}\n          stroke=\"black\"\n          fill={accessible && zoom > 11 ? 'green' : 'red'}\n          opacity={0.3}\n        />\n      )}\n    </SvgOverlay>\n  );\n};\n\nCircleOverlay.propTypes = {\n  mapViewport: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number,\n    latitude: PropTypes.number,\n    longitude: PropTypes.number\n  })\n};\n\nCircleOverlay.defaultProps = {\n  mapViewport: { width: 200, height: 200, latitude: 0, longitude: 0 }\n};\n\nclass MapView extends PureComponent {\n  static propTypes = {\n    cards: PropTypes.array.isRequired,\n    mapZoom: PropTypes.number.isRequired,\n    userLocation: PropTypes.array.isRequired,\n    selectedCardId: PropTypes.string.isRequired,\n    extCardId: PropTypes.string.isRequired,\n    centerLocation: PropTypes.object.isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    cardChallengeOpen: PropTypes.bool.isRequired,\n\n    userMoveAction: PropTypes.func.isRequired,\n    changeMapViewportAction: PropTypes.func.isRequired,\n    selectCardAction: PropTypes.func.isRequired,\n    extCardAction: PropTypes.func.isRequired,\n    toggleCardChallengeAction: PropTypes.func.isRequired,\n    screenResizeAction: PropTypes.func.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    // TODO put into container element\n    const { screenResizeAction } = props;\n\n    // this._onChangeViewport = this._onChangeViewport.bind(this);\n    // this._userMove = this._userMove.bind(this);\n    // this.gridSpan = this.gridSpan.bind(this);\n\n    window.addEventListener('resize', () => {\n      screenResizeAction({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    });\n\n    // TODO: respect margins\n    screenResizeAction({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n    this.scrollTo = scrollTo.bind(this);\n    this.node = null;\n  }\n\n  componentDidMount() {\n    // const { screenResize } = this.props;\n    // window.addEventListener('resize', () => {\n    //   this.setState({\n    //     mapHeight: {\n    //       width: window.innerWidth,\n    //       height: window.innerHeight\n    //     }\n    //   });\n    // });\n\n    navigator.geolocation.watchPosition(\n      pos => {\n        const userLocation = {\n          latitude: pos.coords.latitude,\n          longitude: pos.coords.longitude\n        };\n\n        // TODO:\n        const centerLocation = { ...userLocation };\n      },\n      // 50.846749, 4.352349\n      d => console.log('error watch pos', d),\n      { timeout: 1000000 }\n    );\n  }\n\n  componentWillUnmount() {\n    window.addEventListener('resize', () => {});\n    navigator.geolocation.watchPosition(() => {}, () => {}, { timeout: 1 });\n    navigator.geolocation.getCurrentPosition(() => {}, () => {}, {\n      timeout: 1\n    });\n\n    // navigator.geolocation.clearWatch(this.state.watchPosId);\n  }\n\n  render() {\n    const {\n      cards,\n      mapZoom,\n      userLocation,\n      selectedCardId,\n      centerLocation,\n      width,\n      height,\n      extCardId,\n      headerPad,\n\n      userMoveAction,\n      changeMapViewportAction,\n      selectCardAction,\n      extCardAction,\n      cardChallengeOpen,\n      toggleCardChallengeAction\n    } = this.props;\n\n    // console.log('width', mapDim);\n    const mapDim = { width, height };\n    // console.log('userLocation', userLocation, 'centerLocation', centerLocation);\n    const mapViewport = { ...mapDim, ...centerLocation, zoom: mapZoom };\n    // const gridConfig = this.gridSpan();\n    const selectedCard =\n      selectedCardId !== null ? cards.find(d => d.id === selectedCardId) : null;\n\n    return (\n      <div>\n        <Modal\n          id=\"modal\"\n          content={selectedCard}\n          visible={cardChallengeOpen}\n          closeHandler={() =>\n            toggleCardChallengeAction({ cardChallengeOpen: false })\n          }\n        >\n          <iframe\n            title=\"emperors\"\n            src=\"http://thescalli.com/emperors/\"\n            style={{ border: 'none', width: '100%', height: height + 20 }}\n          />\n        </Modal>\n        <div ref={node => (this.node = node)} style={{ position: 'relative' }}>\n          <div\n            style={{\n              position: 'absolute',\n              left: 0,\n              right: 0\n              // pointerEvents: extCardId !== null ? 'none' : null\n            }}\n          >\n            <MapGL\n              {...mapViewport}\n              onViewportChange={changeMapViewportAction}\n              isdragging={false}\n              startdraglnglat={null}\n              onClick={userMoveAction}\n            >\n              {selectedCard && (\n                <CircleOverlay\n                  userLocation={userLocation}\n                  mapViewport={mapViewport}\n                  selectedCard={selectedCard}\n                />\n              )}\n              <SlowDivOverlay {...mapViewport} data={cards}>\n                {(c, [x, y]) => (\n                  <AnimMarker\n                    key={c.id}\n                    selected={extCardId === c.id}\n                    width={extCardId === c.id ? width - 10 : 40}\n                    height={extCardId === c.id ? height - 5 : 50}\n                    x={x + 5}\n                    y={y + 3}\n                  >\n                    <Card\n                      {...c}\n                      onClose={() => extCardAction(null)}\n                      onCollect={() =>\n                        toggleCardChallengeAction({ cardChallengeOpen: true })\n                      }\n                    />\n                  </AnimMarker>\n                )}\n              </SlowDivOverlay>\n              <DivOverlay {...mapViewport} data={[{ loc: userLocation }]}>\n                {(c, [x, y]) => <UserMarker x={x} y={y} />}\n              </DivOverlay>\n              <UserOverlay {...mapViewport} location={userLocation} />\n            </MapGL>\n          </div>\n\n          <div\n            className={`${cx.cardGridCont}`}\n            style={{\n              position: 'absolute',\n              left: 0,\n              right: 0,\n              paddingTop: '20px'\n            }}\n          >\n            <CardGrid\n              cards={cards}\n              onSelect={selectCardAction}\n              onExtend={extCardAction}\n              offset={width / 4}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default MapView;\n"]}]}