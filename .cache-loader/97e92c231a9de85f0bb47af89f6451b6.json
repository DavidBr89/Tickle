{"remainingRequest":"/home/djan/dev/TickleClient/node_modules/babel-loader/lib/index.js!/home/djan/dev/TickleClient/src/components/CardCreator/DragLayer/SourceTargetCont.jsx","dependencies":[{"path":"/home/djan/dev/TickleClient/src/components/CardCreator/DragLayer/SourceTargetCont.jsx","mtime":1517415935066},{"path":"/home/djan/dev/TickleClient/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/home/djan/dev/TickleClient/node_modules/babel-loader/lib/index.js","mtime":1492805601000}],"contextDependencies":[],"result":["import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _dec, _class, _class2, _temp, _dec2, _class3, _class4, _temp2;\n\nimport React, { Fragment, PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource, DropTarget } from 'react-dnd';\n\n// import cxx from '../CardCreator.scss';\n\nimport CardDragPreview from './CardDragPreview';\n\n// import update from 'immutability-helper';\n\nvar style = {\n  // border: '1px dashed gray',\n  // backgroundColor: 'white',\n  // padding: '0.5rem 1rem',\n  // marginRight: '1.5rem',\n  // marginBottom: '1.5rem',\n  cursor: 'move',\n  zIndex: 2000\n  // float: 'left'\n};\n\nvar boxSource = {\n  beginDrag: function beginDrag(props) {\n    console.log('props', props);\n    props.dragHandler(true);\n    return {};\n  },\n  endDrag: function endDrag(props, monitor) {\n    var item = monitor.getItem();\n    var dropResult = monitor.getDropResult();\n\n    if (dropResult) {\n      alert('You dropped ' + item.name + ' into ' + dropResult.name + '!'); // eslint-disable-line no-alert\n    }\n    props.dragHandler(false);\n    return {};\n  }\n};\n\nvar DragSourceCont = (_dec = DragSource('DragSourceCont', boxSource, function (connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n    clientOffset: monitor.getClientOffset(),\n    sourceClientOffset: monitor.getSourceClientOffset(),\n    diffFromInitialOffset: monitor.getDifferenceFromInitialOffset(),\n    isdropped: monitor.didDrop()\n  };\n}), _dec(_class = (_temp = _class2 = function (_PureComponent) {\n  _inherits(DragSourceCont, _PureComponent);\n\n  function DragSourceCont() {\n    _classCallCheck(this, DragSourceCont);\n\n    return _possibleConstructorReturn(this, (DragSourceCont.__proto__ || _Object$getPrototypeOf(DragSourceCont)).apply(this, arguments));\n  }\n\n  _createClass(DragSourceCont, [{\n    key: 'render',\n\n\n    // componentDidUpdate() {\n    //   const { dragHandler, isDragging } = this.props;\n    //   // if (isDragging) {\n    //   //   dragHandler(isDragging);\n    //   // }\n    // }\n\n    value: function render() {\n      var _props = this.props,\n          isDragging = _props.isDragging,\n          connectDragSource = _props.connectDragSource,\n          children = _props.children;\n      // const { name } = this.props;\n\n      var opacity = isDragging ? 0.4 : 1;\n\n      return connectDragSource(React.createElement(\n        'div',\n        { style: { width: '100%', height: '100%', opacity: opacity } },\n        children\n      ));\n    }\n  }]);\n\n  return DragSourceCont;\n}(PureComponent), _class2.propTypes = {\n  connectDragSource: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  // name: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n  dragHandler: PropTypes.func\n}, _class2.defaultProps = {\n  dragHandler: function dragHandler(d) {\n    return d;\n  }\n}, _temp)) || _class);\n\n\nvar boxTarget = {\n  drop: function drop(props, monitor, component) {\n    var delta = monitor.getDifferenceFromInitialOffset();\n    var item = monitor.getItem();\n\n    var left = Math.round(delta.x);\n    var top = Math.round(delta.y);\n\n    console.log('drop', monitor.didDrop());\n    component.drop(item.id, left, top, props.dragged);\n  }\n  // },\n  // canDrop(props, monitor, component) {\n  //   console.log('canDrop', component, monitor);\n  //   // component.undrop();\n  // }\n\n};\n\nvar DropTargetCont = (_dec2 = DropTarget('DragSourceCont', boxTarget, function (connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    clientOffset: monitor.getClientOffset(),\n    sourceClientOffset: monitor.getSourceClientOffset(),\n    diffFromInitialOffset: monitor.getDifferenceFromInitialOffset(),\n    isdropped: monitor.didDrop()\n  };\n}), _dec2(_class3 = (_temp2 = _class4 = function (_PureComponent2) {\n  _inherits(DropTargetCont, _PureComponent2);\n\n  function DropTargetCont(props) {\n    _classCallCheck(this, DropTargetCont);\n\n    var _this2 = _possibleConstructorReturn(this, (DropTargetCont.__proto__ || _Object$getPrototypeOf(DropTargetCont)).call(this, props));\n\n    _this2.state = {\n      top: 20,\n      left: 80,\n      dropped: false\n    };\n    return _this2;\n  }\n\n  _createClass(DropTargetCont, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _props2 = this.props,\n          dropHandler = _props2.dropHandler,\n          children = _props2.children;\n      var _state = this.state,\n          left = _state.left,\n          top = _state.top;\n      // console.log('yeah dropHandler', this.props);\n      // const newid = Math.random() * 100;\n      // console.log('dropped', dropped, 'prevDropped', prevState.dropped);\n\n      console.log(this.props.dragged, prevProps.dragged);\n      if (prevProps.dragged && !this.props.dragged) dropHandler({ id: Math.random() * 1999, x: left, y: top });\n    }\n  }, {\n    key: 'drop',\n    value: function drop(id, left, top, dropped) {\n      console.log('drop', dropped);\n      this.setState({ id: id, left: left, top: top, dropped: dropped });\n    }\n\n    // }\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          connectDropTarget = _props3.connectDropTarget,\n          children = _props3.children;\n      var _state2 = this.state,\n          id = _state2.id,\n          left = _state2.left,\n          top = _state2.top,\n          dropped = _state2.dropped;\n      // const { x, y } = clientOffset || { x: 0, y: 0 };\n      // console.log('dropped', dropped);\n\n      return connectDropTarget(React.createElement(\n        'div',\n        {\n          style: {\n            position: 'absolute'\n          }\n        },\n        children\n      ));\n    }\n  }]);\n\n  return DropTargetCont;\n}(PureComponent), _class4.propTypes = {\n  connectDropTarget: PropTypes.func.isRequired,\n  // isOver: PropTypes.bool.isRequired,\n  // canDrop: PropTypes.bool.isRequired,\n  // clientOffset: PropTypes.object.isRequired,\n  children: PropTypes.element.isRequired,\n  // dropped: PropTypes.bool.isRequired,\n  dropHandler: PropTypes.func\n}, _class4.defaultProps = {\n  dropHandler: function dropHandler(d) {\n    return d;\n  }\n}, _temp2)) || _class3);\n\n\nexport { DragSourceCont, DropTargetCont };\n;\n\nvar _temp3 = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(style, 'style', '/home/djan/dev/TickleClient/src/components/CardCreator/DragLayer/SourceTargetCont.jsx');\n\n  __REACT_HOT_LOADER__.register(boxSource, 'boxSource', '/home/djan/dev/TickleClient/src/components/CardCreator/DragLayer/SourceTargetCont.jsx');\n\n  __REACT_HOT_LOADER__.register(DragSourceCont, 'DragSourceCont', '/home/djan/dev/TickleClient/src/components/CardCreator/DragLayer/SourceTargetCont.jsx');\n\n  __REACT_HOT_LOADER__.register(boxTarget, 'boxTarget', '/home/djan/dev/TickleClient/src/components/CardCreator/DragLayer/SourceTargetCont.jsx');\n\n  __REACT_HOT_LOADER__.register(DropTargetCont, 'DropTargetCont', '/home/djan/dev/TickleClient/src/components/CardCreator/DragLayer/SourceTargetCont.jsx');\n}();\n\n;",{"version":3,"sources":["src/components/CardCreator/DragLayer/SourceTargetCont.jsx"],"names":["React","Fragment","PureComponent","PropTypes","DragSource","DropTarget","CardDragPreview","style","cursor","zIndex","boxSource","beginDrag","props","console","log","dragHandler","endDrag","monitor","item","getItem","dropResult","getDropResult","alert","name","DragSourceCont","connect","connectDragSource","dragSource","isDragging","clientOffset","getClientOffset","sourceClientOffset","getSourceClientOffset","diffFromInitialOffset","getDifferenceFromInitialOffset","isdropped","didDrop","children","opacity","width","height","propTypes","func","isRequired","bool","element","defaultProps","d","boxTarget","drop","component","delta","left","Math","round","x","top","y","id","dragged","DropTargetCont","connectDropTarget","dropTarget","isOver","state","dropped","prevProps","dropHandler","random","setState","position"],"mappings":"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","file":"SourceTargetCont.jsx","sourceRoot":"/home/djan/dev/TickleClient","sourcesContent":["import React, { Fragment, PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { DragSource, DropTarget } from 'react-dnd';\n\n// import cxx from '../CardCreator.scss';\n\nimport CardDragPreview from './CardDragPreview';\n\n// import update from 'immutability-helper';\n\nconst style = {\n  // border: '1px dashed gray',\n  // backgroundColor: 'white',\n  // padding: '0.5rem 1rem',\n  // marginRight: '1.5rem',\n  // marginBottom: '1.5rem',\n  cursor: 'move',\n  zIndex: 2000\n  // float: 'left'\n};\n\nconst boxSource = {\n  beginDrag(props) {\n    console.log('props', props);\n    props.dragHandler(true);\n    return {};\n  },\n\n  endDrag(props, monitor) {\n    const item = monitor.getItem();\n    const dropResult = monitor.getDropResult();\n\n    if (dropResult) {\n      alert(`You dropped ${item.name} into ${dropResult.name}!`); // eslint-disable-line no-alert\n    }\n    props.dragHandler(false);\n    return {};\n  }\n};\n\n@DragSource('DragSourceCont', boxSource, (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  isDragging: monitor.isDragging(),\n  clientOffset: monitor.getClientOffset(),\n  sourceClientOffset: monitor.getSourceClientOffset(),\n  diffFromInitialOffset: monitor.getDifferenceFromInitialOffset(),\n  isdropped: monitor.didDrop()\n}))\nclass DragSourceCont extends PureComponent {\n  static propTypes = {\n    connectDragSource: PropTypes.func.isRequired,\n    isDragging: PropTypes.bool.isRequired,\n    // name: PropTypes.string.isRequired,\n    children: PropTypes.element.isRequired,\n    dragHandler: PropTypes.func\n  };\n\n  static defaultProps = {\n    dragHandler: d => d\n  };\n\n  // componentDidUpdate() {\n  //   const { dragHandler, isDragging } = this.props;\n  //   // if (isDragging) {\n  //   //   dragHandler(isDragging);\n  //   // }\n  // }\n\n  render() {\n    const { isDragging, connectDragSource, children } = this.props;\n    // const { name } = this.props;\n    const opacity = isDragging ? 0.4 : 1;\n\n    return connectDragSource(\n      <div style={{ width: '100%', height: '100%', opacity }}>{children}</div>\n    );\n  }\n}\n\nconst boxTarget = {\n  drop(props, monitor, component) {\n    const delta = monitor.getDifferenceFromInitialOffset();\n    const item = monitor.getItem();\n\n    const left = Math.round(delta.x);\n    const top = Math.round(delta.y);\n\n    console.log('drop', monitor.didDrop());\n    component.drop(item.id, left, top, props.dragged);\n  }\n  // },\n  // canDrop(props, monitor, component) {\n  //   console.log('canDrop', component, monitor);\n  //   // component.undrop();\n  // }\n};\n\n@DropTarget('DragSourceCont', boxTarget, (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n  clientOffset: monitor.getClientOffset(),\n  sourceClientOffset: monitor.getSourceClientOffset(),\n  diffFromInitialOffset: monitor.getDifferenceFromInitialOffset(),\n  isdropped: monitor.didDrop()\n}))\nclass DropTargetCont extends PureComponent {\n  static propTypes = {\n    connectDropTarget: PropTypes.func.isRequired,\n    // isOver: PropTypes.bool.isRequired,\n    // canDrop: PropTypes.bool.isRequired,\n    // clientOffset: PropTypes.object.isRequired,\n    children: PropTypes.element.isRequired,\n    // dropped: PropTypes.bool.isRequired,\n    dropHandler: PropTypes.func\n  };\n\n  static defaultProps = {\n    dropHandler: d => d\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      top: 20,\n      left: 80,\n      dropped: false\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { dropHandler, children } = this.props;\n    const { left, top } = this.state;\n    // console.log('yeah dropHandler', this.props);\n    // const newid = Math.random() * 100;\n    // console.log('dropped', dropped, 'prevDropped', prevState.dropped);\n    console.log(this.props.dragged,  prevProps.dragged)\n    if (prevProps.dragged && !this.props.dragged)\n      dropHandler({ id: Math.random() * 1999, x: left, y: top });\n  }\n\n  drop(id, left, top, dropped) {\n    console.log('drop', dropped);\n    this.setState({ id, left, top, dropped });\n  }\n\n  // }\n\n  render() {\n    const {\n      // canDrop,\n      // isOver,\n      connectDropTarget,\n      // clientOffset,\n      children\n    } = this.props;\n    const { id, left, top, dropped } = this.state;\n    // const { x, y } = clientOffset || { x: 0, y: 0 };\n    // console.log('dropped', dropped);\n\n    return connectDropTarget(\n      <div\n        style={{\n          position: 'absolute'\n        }}\n      >\n        {children}\n      </div>\n    );\n  }\n}\n\nexport { DragSourceCont, DropTargetCont };\n"]}]}