{"remainingRequest":"/home/djan/dev/TickleClient/node_modules/babel-loader/lib/index.js!/home/djan/dev/TickleClient/src/components/CardCreator/CardCreator.jsx","dependencies":[{"path":"/home/djan/dev/TickleClient/src/components/CardCreator/CardCreator.jsx","mtime":1517425748223},{"path":"/home/djan/dev/TickleClient/node_modules/cache-loader/dist/cjs.js","mtime":1510929699000},{"path":"/home/djan/dev/TickleClient/node_modules/babel-loader/lib/index.js","mtime":1492805601000}],"contextDependencies":[],"result":["import _slicedToArray from 'babel-runtime/helpers/slicedToArray';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\n\nvar _class, _temp;\n\nimport React, { Component } from 'react';\n// import ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\n// import HTML5Backend from 'react-dnd-html5-backend';\n\nimport { default as TouchBackend } from 'react-dnd-touch-backend';\nimport { DragDropContextProvider } from 'react-dnd';\n\nimport MapGL from 'react-map-gl';\nimport Grid from 'mygrid/dist';\n// import update from 'immutability-helper';\n\nimport { PreviewCard, Card } from '../cards';\nimport cxx from './CardCreator.scss';\n\nimport { DivOverlay, CardMarker, AnimMarker } from '../utils/map-layers/DivOverlay';\n// import cardIconSrc from '../utils/map-layers/cardIcon.svg';\n\nimport CardDragPreview from './DragLayer/CardDragPreview';\n\nimport { DragSourceCont, DropTargetCont } from './DragLayer/SourceTargetCont';\nimport DragLayer from './DragLayer/DragLayer';\nimport Analytics from './Analytics';\n// import { AnimMarker } from '../utils/map-layers/DivOverlay';\n\n// const container = ({}) =>\n\nvar CardCreator = (_temp = _class = function (_Component) {\n  _inherits(CardCreator, _Component);\n\n  function CardCreator(props) {\n    _classCallCheck(this, CardCreator);\n\n    var _this = _possibleConstructorReturn(this, (CardCreator.__proto__ || _Object$getPrototypeOf(CardCreator)).call(this, props));\n\n    var screenResize = _this.props.screenResize;\n    // TODO: fix later;\n\n    var _ref = [window.innerWidth - 4, window.innerHeight],\n        width = _ref[0],\n        height = _ref[1];\n\n    screenResize({ width: width, height: height });\n    console.log('constr');\n    // this.state = { newCards: [] };\n    return _this;\n  }\n\n  _createClass(CardCreator, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // const el = ReactDOM.findDOMNode(this);\n      // scrollTo(5);\n      // this._scroller.scrollTo(5);\n      console.log('scroller', this._scroller);\n    }\n\n    // componentDidUpdate() {}\n\n    // shouldComponentUpdate(nextProps) {\n    //   const { mapViewport, tempCards, isDragging } = nextProps;\n    //   const newVpStr = JSON.stringify(mapViewport);\n    //   const vpStr = JSON.stringify(this.props.mapViewport);\n    //   // mapViewport.latitude !== this.props.mapViewport.latitude ||\n    //   // mapViewport.longitude !== this.props.mapViewport.longitude;\n    //\n    //   if (!isDragging) return true;\n    //   return false;\n    // }\n\n    // scrollTo = name => {\n    //\n    //   this._scroller.scrollTo(name);\n    // };\n\n    // latitude={lat}\n    // longitude={long}\n    // zoom={zoom}\n    // mapboxApiAccessToken={process.env.MapboxAccessToken}\n    // onChangeViewport={onChangeViewport}\n    // onClick={onClick}\n    // isDragging={isDragging}\n    // startDragLngLat={startDragLngLat}\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          mapViewport = _props.mapViewport,\n          cards = _props.cards,\n          width = _props.width,\n          height = _props.height,\n          isDragging = _props.isDragging,\n          toggleCardTemplateAction = _props.toggleCardTemplateAction,\n          changeMapViewport = _props.changeMapViewport,\n          openCardDetails = _props.openCardDetails,\n          selectCard = _props.selectCard,\n          selected = _props.selected,\n          createCard = _props.createCard,\n          tempCards = _props.tempCards,\n          dragCard = _props.dragCard,\n          highlighted = _props.highlighted,\n          cardTemplateOpen = _props.cardTemplateOpen;\n\n\n      var mapState = _extends({ width: width, height: height }, mapViewport);\n      var w = 50,\n          h = 50;\n\n\n      var selectedCardId = selected ? selected.id : null;\n      var selectedExtended = selected ? selected.extended : null;\n\n      return React.createElement(\n        DragDropContextProvider,\n        { backend: TouchBackend },\n        React.createElement(\n          'div',\n          {\n            className: '' + cxx.base,\n            style: {\n              position: 'relative',\n              width: width + 'px',\n              height: height + 'px'\n            }\n          },\n          React.createElement(\n            'div',\n            {\n              style: {\n                position: 'absolute',\n                left: 0,\n                top: 0,\n                width: '100%',\n                height: '100%',\n                visibility: cardTemplateOpen ? 'visible' : 'hidden',\n                opacity: cardTemplateOpen ? 1 : 0,\n                transition: 'opacity 1s',\n                zIndex: 400\n              }\n            },\n            cardTemplateOpen && React.createElement(Card, { editable: true, onClose: toggleCardTemplateAction })\n          ),\n          React.createElement(\n            'div',\n            { style: { position: 'absolute' } },\n            React.createElement(DragLayer, null),\n            React.createElement(\n              DropTargetCont,\n              { dropHandler: createCard, dragged: isDragging },\n              React.createElement(\n                MapGL,\n                _extends({}, mapViewport, {\n                  width: width,\n                  height: height,\n                  onViewportChange: !isDragging ? changeMapViewport : null\n                }),\n                React.createElement(\n                  DivOverlay,\n                  _extends({}, mapState, { data: cards }),\n                  function (c, _ref2) {\n                    var _ref3 = _slicedToArray(_ref2, 2),\n                        x = _ref3[0],\n                        y = _ref3[1];\n\n                    return React.createElement(\n                      'div',\n                      {\n                        x: x,\n                        y: y,\n                        style: {\n                          position: 'absolute',\n                          width: w + 'px',\n                          height: h + 'px',\n                          left: x,\n                          top: y\n                        }\n                      },\n                      React.createElement(\n                        DragSourceCont,\n                        {\n                          key: c.title + '  ' + c.date,\n                          dragHandler: dragCard,\n                          dragged: isDragging\n                        },\n                        React.createElement(CardMarker, c)\n                      )\n                    );\n                  }\n                )\n              )\n            )\n          ),\n          React.createElement(\n            'div',\n            {\n              className: 'row no-gutters',\n              style: {\n                // zIndex: 1000,\n                marginBottom: '20px'\n              }\n            },\n            React.createElement(\n              'div',\n              {\n                className: 'col-12 ' + cxx.animHeight,\n                style: {\n                  height: (selected ? height / 2 : 0) + 'px',\n                  background: 'white'\n                }\n              },\n              React.createElement(Analytics, {\n                width: width,\n                height: height / 2,\n                closeHandler: function closeHandler() {\n                  return selectCard(null);\n                }\n              })\n            ),\n            React.createElement(\n              'div',\n              { className: 'input-group mt-3 mb-3 ml-1 mr-1' },\n              React.createElement('textarea', { className: 'form-control', 'aria-label': 'With textarea' }),\n              React.createElement(\n                'div',\n                { className: 'input-group-prepend' },\n                React.createElement(\n                  'span',\n                  {\n                    className: 'input-group-text',\n                    onClick: toggleCardTemplateAction\n                  },\n                  React.createElement('i', {\n                    className: 'fa fa-2x fa-plus',\n                    'aria-hidden': 'true',\n                    style: {\n                      textAlign: 'center',\n                      width: '100%',\n                      color: 'grey',\n                      pointerEvents: 'cursor'\n                    }\n                  })\n                )\n              )\n            ),\n            React.createElement(\n              'div',\n              {\n                style: {\n                  width: '100%',\n                  overflowX: 'scroll',\n                  zIndex: 200\n                }\n              },\n              React.createElement(\n                Grid,\n                {\n                  cols: cards.length + 1,\n                  rows: 1,\n                  gap: 1,\n                  style: {\n                    transition: 'opacity .25s ease-in-out',\n                    opacity: !selected ? 1 : 0,\n                    width: '300%'\n                    // height: '20%'\n                  }\n                },\n                React.createElement(\n                  DragSourceCont,\n                  { dragHandler: dragCard },\n                  React.createElement(\n                    'div',\n                    {\n                      style: {\n                        width: '100%',\n                        height: '100%',\n                        display: 'flex',\n                        alignContent: 'center',\n                        alignItems: 'center',\n                        background: 'lightgrey',\n                        border: '1px dashed grey'\n                        // margin: '10%'\n                      },\n                      onClick: function onClick() {\n                        return toggleCardTemplateAction();\n                      }\n                    },\n                    React.createElement('i', {\n                      className: 'fa fa-4x fa-plus',\n                      'aria-hidden': 'true',\n                      style: {\n                        textAlign: 'center',\n                        width: '100%',\n                        color: 'grey',\n                        pointerEvents: 'cursor'\n                      }\n                    })\n                  )\n                ),\n                cards.map(function (d) {\n                  return React.createElement(\n                    'div',\n                    { onClick: function onClick() {\n                        return openCardDetails(d.id);\n                      } },\n                    React.createElement(PreviewCard, _extends({}, d, _this2.props))\n                  );\n                })\n              )\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return CardCreator;\n}(Component), _class.propTypes = {\n  mapViewport: PropTypes.object,\n  cards: PropTypes.array,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  tempCards: PropTypes.array,\n  selected: PropTypes.string,\n  openCardDetails: PropTypes.func,\n  selectCard: PropTypes.func,\n  createCard: PropTypes.func,\n  screenResize: PropTypes.func,\n  changeMapViewport: PropTypes.func,\n  dragCard: PropTypes.func\n}, _class.defaultProps = {\n  mapViewport: {\n    width: 100,\n    height: 100,\n    zoom: 10,\n    latitude: 0,\n    longitude: 0\n  },\n  cards: [],\n  width: 100,\n  height: 100,\n  tempCards: [],\n  selected: null,\n  cardTemplateOpen: false,\n  openCardDetails: function openCardDetails(d) {\n    return d;\n  },\n  selectedCard: function selectedCard(d) {\n    return d;\n  },\n  createCard: function createCard(d) {\n    return d;\n  },\n  screenResize: function screenResize(d) {\n    return d;\n  },\n  changeMapViewport: function changeMapViewport(d) {\n    return d;\n  },\n  dragCard: function dragCard(d) {\n    return d;\n  }\n}, _temp);\nvar _default = CardCreator;\n\n\nexport default _default;\n;\n\nvar _temp2 = function () {\n  if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n    return;\n  }\n\n  __REACT_HOT_LOADER__.register(CardCreator, 'CardCreator', '/home/djan/dev/TickleClient/src/components/CardCreator/CardCreator.jsx');\n\n  __REACT_HOT_LOADER__.register(_default, 'default', '/home/djan/dev/TickleClient/src/components/CardCreator/CardCreator.jsx');\n}();\n\n;",{"version":3,"sources":["src/components/CardCreator/CardCreator.jsx"],"names":["React","Component","PropTypes","default","TouchBackend","DragDropContextProvider","MapGL","Grid","PreviewCard","Card","cxx","DivOverlay","CardMarker","AnimMarker","CardDragPreview","DragSourceCont","DropTargetCont","DragLayer","Analytics","CardCreator","props","screenResize","window","innerWidth","innerHeight","width","height","console","log","_scroller","mapViewport","cards","isDragging","toggleCardTemplateAction","changeMapViewport","openCardDetails","selectCard","selected","createCard","tempCards","dragCard","highlighted","cardTemplateOpen","mapState","w","h","selectedCardId","id","selectedExtended","extended","base","position","left","top","visibility","opacity","transition","zIndex","c","x","y","title","date","marginBottom","animHeight","background","textAlign","color","pointerEvents","overflowX","length","display","alignContent","alignItems","border","map","d","propTypes","object","array","number","string","func","defaultProps","zoom","latitude","longitude","selectedCard"],"mappings":"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","file":"CardCreator.jsx","sourceRoot":"/home/djan/dev/TickleClient","sourcesContent":["import React, { Component } from 'react';\n// import ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\n// import HTML5Backend from 'react-dnd-html5-backend';\n\nimport { default as TouchBackend } from 'react-dnd-touch-backend';\nimport { DragDropContextProvider } from 'react-dnd';\n\nimport MapGL from 'react-map-gl';\nimport Grid from 'mygrid/dist';\n// import update from 'immutability-helper';\n\nimport { PreviewCard, Card } from '../cards';\nimport cxx from './CardCreator.scss';\n\nimport {\n  DivOverlay,\n  CardMarker,\n  AnimMarker\n} from '../utils/map-layers/DivOverlay';\n// import cardIconSrc from '../utils/map-layers/cardIcon.svg';\n\nimport CardDragPreview from './DragLayer/CardDragPreview';\n\nimport { DragSourceCont, DropTargetCont } from './DragLayer/SourceTargetCont';\nimport DragLayer from './DragLayer/DragLayer';\nimport Analytics from './Analytics';\n// import { AnimMarker } from '../utils/map-layers/DivOverlay';\n\n// const container = ({}) =>\n\nclass CardCreator extends Component {\n  static propTypes = {\n    mapViewport: PropTypes.object,\n    cards: PropTypes.array,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    tempCards: PropTypes.array,\n    selected: PropTypes.string,\n    openCardDetails: PropTypes.func,\n    selectCard: PropTypes.func,\n    createCard: PropTypes.func,\n    screenResize: PropTypes.func,\n    changeMapViewport: PropTypes.func,\n    dragCard: PropTypes.func\n  };\n\n  static defaultProps = {\n    mapViewport: {\n      width: 100,\n      height: 100,\n      zoom: 10,\n      latitude: 0,\n      longitude: 0\n    },\n    cards: [],\n    width: 100,\n    height: 100,\n    tempCards: [],\n    selected: null,\n    cardTemplateOpen: false,\n    openCardDetails: d => d,\n    selectedCard: d => d,\n    createCard: d => d,\n    screenResize: d => d,\n    changeMapViewport: d => d,\n    dragCard: d => d\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { screenResize } = this.props;\n    // TODO: fix later;\n    const [width, height] = [window.innerWidth - 4, window.innerHeight];\n    screenResize({ width, height });\n    console.log('constr');\n    // this.state = { newCards: [] };\n  }\n\n  componentDidMount() {\n    // const el = ReactDOM.findDOMNode(this);\n    // scrollTo(5);\n    // this._scroller.scrollTo(5);\n    console.log('scroller', this._scroller);\n  }\n\n  // componentDidUpdate() {}\n\n  // shouldComponentUpdate(nextProps) {\n  //   const { mapViewport, tempCards, isDragging } = nextProps;\n  //   const newVpStr = JSON.stringify(mapViewport);\n  //   const vpStr = JSON.stringify(this.props.mapViewport);\n  //   // mapViewport.latitude !== this.props.mapViewport.latitude ||\n  //   // mapViewport.longitude !== this.props.mapViewport.longitude;\n  //\n  //   if (!isDragging) return true;\n  //   return false;\n  // }\n\n  // scrollTo = name => {\n  //\n  //   this._scroller.scrollTo(name);\n  // };\n\n  // latitude={lat}\n  // longitude={long}\n  // zoom={zoom}\n  // mapboxApiAccessToken={process.env.MapboxAccessToken}\n  // onChangeViewport={onChangeViewport}\n  // onClick={onClick}\n  // isDragging={isDragging}\n  // startDragLngLat={startDragLngLat}\n  render() {\n    const {\n      mapViewport,\n      cards,\n      width,\n      height,\n      isDragging,\n      toggleCardTemplateAction,\n\n      changeMapViewport,\n      openCardDetails,\n\n      selectCard,\n      selected,\n      createCard,\n      tempCards,\n      dragCard,\n      highlighted,\n      cardTemplateOpen\n    } = this.props;\n\n    const mapState = { width, height, ...mapViewport };\n    const [w, h] = [50, 50];\n\n    const selectedCardId = selected ? selected.id : null;\n    const selectedExtended = selected ? selected.extended : null;\n\n    return (\n      <DragDropContextProvider backend={TouchBackend}>\n        <div\n          className={`${cxx.base}`}\n          style={{\n            position: 'relative',\n            width: `${width}px`,\n            height: `${height}px`\n          }}\n        >\n          <div\n            style={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              width: '100%',\n              height: '100%',\n              visibility: cardTemplateOpen ? 'visible' : 'hidden',\n              opacity: cardTemplateOpen ? 1 : 0,\n              transition: 'opacity 1s',\n              zIndex: 400\n            }}\n          >\n            {cardTemplateOpen && (\n              <Card editable onClose={toggleCardTemplateAction} />\n            )}\n          </div>\n          <div style={{ position: 'absolute' }}>\n            <DragLayer />\n            <DropTargetCont dropHandler={createCard} dragged={isDragging}>\n              <MapGL\n                {...mapViewport}\n                width={width}\n                height={height}\n                onViewportChange={!isDragging ? changeMapViewport : null}\n              >\n                {/* TODO: change Key */}\n                <DivOverlay {...mapState} data={cards}>\n                  {(c, [x, y]) => (\n                    <div\n                      x={x}\n                      y={y}\n                      style={{\n                        position: 'absolute',\n                        width: `${w}px`,\n                        height: `${h}px`,\n                        left: x,\n                        top: y\n                      }}\n                    >\n                      <DragSourceCont\n                        key={`${c.title}  ${c.date}`}\n                        dragHandler={dragCard}\n                        dragged={isDragging}\n                      >\n                        <CardMarker {...c} />\n                      </DragSourceCont>\n                    </div>\n                  )}\n                </DivOverlay>\n              </MapGL>\n            </DropTargetCont>\n          </div>\n          <div\n            className=\"row no-gutters\"\n            style={{\n              // zIndex: 1000,\n              marginBottom: '20px'\n            }}\n          >\n            <div\n              className={`col-12 ${cxx.animHeight}`}\n              style={{\n                height: `${selected ? height / 2 : 0}px`,\n                background: 'white'\n              }}\n            >\n              <Analytics\n                width={width}\n                height={height / 2}\n                closeHandler={() => selectCard(null)}\n              />\n            </div>\n            <div className=\"input-group mt-3 mb-3 ml-1 mr-1\">\n              <textarea className=\"form-control\" aria-label=\"With textarea\" />\n              <div className=\"input-group-prepend\">\n                <span\n                  className=\"input-group-text\"\n                  onClick={toggleCardTemplateAction}\n                >\n                  <i\n                    className=\"fa fa-2x fa-plus\"\n                    aria-hidden=\"true\"\n                    style={{\n                      textAlign: 'center',\n                      width: '100%',\n                      color: 'grey',\n                      pointerEvents: 'cursor'\n                    }}\n                  />\n                </span>\n              </div>\n            </div>\n            <div\n              style={{\n                width: '100%',\n                overflowX: 'scroll',\n                zIndex: 200\n              }}\n            >\n              <Grid\n                cols={cards.length + 1}\n                rows={1}\n                gap={1}\n                style={{\n                  transition: 'opacity .25s ease-in-out',\n                  opacity: !selected ? 1 : 0,\n                  width: '300%'\n                  // height: '20%'\n                }}\n              >\n                <DragSourceCont dragHandler={dragCard}>\n                  <div\n                    style={{\n                      width: '100%',\n                      height: '100%',\n                      display: 'flex',\n                      alignContent: 'center',\n                      alignItems: 'center',\n                      background: 'lightgrey',\n                      border: '1px dashed grey'\n                      // margin: '10%'\n                    }}\n                    onClick={() => toggleCardTemplateAction()}\n                  >\n                    <i\n                      className=\"fa fa-4x fa-plus\"\n                      aria-hidden=\"true\"\n                      style={{\n                        textAlign: 'center',\n                        width: '100%',\n                        color: 'grey',\n                        pointerEvents: 'cursor'\n                      }}\n                    />\n                  </div>\n                </DragSourceCont>\n                {cards.map(d => (\n                  <div onClick={() => openCardDetails(d.id)}>\n                    <PreviewCard {...d} {...this.props} />\n                  </div>\n                ))}\n              </Grid>\n            </div>\n          </div>\n        </div>\n      </DragDropContextProvider>\n    );\n  }\n}\n\nexport default CardCreator;\n"]}]}